<analysis>
The trajectory details the evolution of the RealtorsPal AI CRM, starting with bug fixes and UI enhancements. Initially, a filter template bug and global search issues were resolved, followed by a major upgrade to a multi-agent AI system with LLM integration and comprehensive configuration options. User requests then drove the implementation of an AI Agent button on lead cards in both Kanban and table views, enabling per-lead AI orchestration. This led to the development of a Lead Generation AI with a webhook-first auto-upsert flow and a Nurturing AI featuring an interactive Activity Board. Deployment readiness was assessed and critical hardcoding issues were resolved. The most recent significant work involved implementing dark/light mode and mobile responsiveness, which included fixing mobile menu rendering issues. The current task is integrating a new CrewAI-based lead generation service.
</analysis>

<product_requirements>
The RealtorsPal AI CRM manages real estate leads using AI. Key features include advanced lead filtering with saved templates and a quick-access dropdown, and a comprehensive global search for leads, app pages, features, and settings. A sophisticated multi-agent AI system (Crew AI-style) comprising six specialized agents (Orchestrator, Lead Generator, Nurturer, Customer Service, Onboarding, Call Log Analyst) automates CRM tasks. Each agent is configurable with LLM models (OpenAI, Anthropic, Google), prompts, and rules. The AI Agents page provides live monitoring and a Human-in-the-Loop (HITL) approval queue for critical actions, though Lead Generation AI operates automatically via webhooks. Users can manually trigger AI agents on specific leads, choosing an agent or deferring to the Orchestrator. The system now features a Nurturing AI with an Activity Board, displaying AI-suggested tasks (calls, SMS, emails) and message drafts, accessible via a dedicated button above the lead pipeline on the dashboard. The application is also expected to be mobile-responsive and support dark/light mode.
</product_requirements>

<key_technical_concepts>
- **Backend**: FastAPI, Motor (async MongoDB driver), Pydantic for data validation, CrewAI for multi-agent orchestration, Apify for data scraping.
- **Frontend**: React, Tailwind CSS (with ), Zustand for state management.
- **AI/LLM Integration**:  library for multi-provider LLM support (OpenAI, Anthropic, Google).
- **Communication**: Axios for API calls, Custom Browser Events for cross-component state sync, Server-Sent Events (SSE) for real-time logs.
- **Persistence**: MongoDB, .
- **UI/UX**: Modals, Kanban board, custom theming (dark/light mode).
</key_technical_concepts>

<code_architecture>
The application utilizes a monorepo structure with a React frontend and a FastAPI backend.



-   ****
    -   **Importance**: Central FastAPI backend, managing all API endpoints, business logic, and database interactions.
    -   **Changes**: Heavily modified to include comprehensive AI Agent system endpoints, Lead Generation AI webhook (), Nurturing AI logic and endpoints, new MongoDB collections and logging functions (, , ), and deployment-related fixes (environment variable for DB name). It orchestrates agent tasks and handles activity streams.

-   ** (NEW)**
    -   **Importance**: A new, dedicated service for CrewAI-based lead generation, including Apify integrations for Zillow and Kijiji.
    -   **Changes**: Created from user-provided code, it defines CrewAI agents (Orchestrator, Finder, Extractor, Mapper, Enricher, Poster, Summarizer), Apify integration functions, and FastAPI endpoints for triggering lead generation (), checking status (), and streaming live activity ().

-   ****
    -   **Importance**: Centralizes all frontend API calls.
    -   **Changes**: Extended with new functions for AI Agent interaction (orchestration, activities), Nurturing AI, and Lead Generation AI APIs. Deployment fixes removed hardcoded localhost URLs.

-   ****
    -   **Importance**: Main entry point for the React application.
    -   **Changes**: Wrapped the application with  for dark/light mode support.

-   ** (NEW)**
    -   **Importance**: Allows users to select an AI agent or Main Orchestrator to act on a specific lead.
    -   **Changes**: Created to handle agent selection and trigger API calls for orchestration.

-   ** (NEW)**
    -   **Importance**: Displays AI-generated nurturing activities for leads.
    -   **Changes**: Created to render the activity plan. Its content was later moved into .

-   ** (NEW)**
    -   **Importance**: Modal wrapper for the Activity Board, allowing it to be opened on demand.
    -   **Changes**: Created from the content of , it now includes lead names, message draft viewing, activity selection, removal functionality, and placeholder buttons for Add new group, Person, and Group by.

-   ****
    -   **Importance**: Application-wide search.
    -   **Changes**: Deployment fixes removed hardcoded localhost URLs.

-   ****
    -   **Importance**: Defines the main application layout (header, navigation, content area).
    -   **Changes**: Integrated , implemented mobile responsiveness with a hamburger menu, and fixed mobile menu visibility/rendering issues using appropriate CSS and state management.

-   ****
    -   **Importance**: Provides quick access to saved filter templates.
    -   **Changes**: Deployment fixes removed hardcoded localhost URLs.

-   ** (NEW)**
    -   **Importance**: UI component for switching between light and dark modes.
    -   **Changes**: Created to manage theme state and render the toggle button.

-   ** (NEW)**
    -   **Importance**: Provides a React Context for managing and consuming the application's theme (dark/light mode).
    -   **Changes**: Created to encapsulate theme state and toggle logic.

-   ****
    -   **Importance**: Displays leads in a table view.
    -   **Changes**: Added AI Agent button to each lead row, integrated  with state and handlers.

-   ****
    -   **Importance**: Central hub for monitoring and configuring AI Agents.
    -   **Changes**: Updated to display the new Live Activity Stream based on , , and .

-   ****
    -   **Importance**: Main dashboard with Kanban board for leads.
    -   **Changes**: Added AI Agent button to  components, integrated . The  was initially integrated directly but later replaced by an Activities button that opens . Updated various components and styling for dark/light mode and mobile responsiveness.

-   ****
    -   **Importance**: Configuration for Tailwind CSS.
    -   **Changes**: Enabled  to support theme switching based on a class on the HTML element.
</code_architecture>

<pending_tasks>
- Full LLM integration for features beyond the AI Agent system (e.g., streaming responses for chat, prompts editor UX).
- UI polish: Replace basic CSS with Tailwind + shadcn components for pixel-perfect fidelity.
- Advanced analytics dashboards.
- Real Google Drive/Sheets integration for lead import.
- Re-enable user login with features like remember me and Switch User.
- Implement Add new group, Person, and Group by functionalities in the Activity Board Modal.
- Mount and fully integrate the new  into  and the frontend.
</pending_tasks>

<current_work>
The most recent work involved integrating a new, comprehensive CrewAI-based lead generation service. This service, provided as a complete  file, includes multiple specialized AI agents (Orchestrator, Finder, Extractor, Mapper, Enricher, Poster, Summarizer) and Apify integrations for Zillow and Kijiji data scraping. It also defines FastAPI endpoints for running lead generation jobs (), checking their status (), and streaming live activity ().

The AI engineer has successfully:
1.  Created the  file in the backend with the exact code provided by the user.
2.  Attempted to update  to include , , , , and , which initially led to dependency conflicts.
3.  Successfully installed  separately after the conflict.

The next immediate step is to mount the newly created  into the main  by adding its FastAPI routes. Following this, the frontend will need to be updated to trigger this lead generation service from the AI Agents page or other relevant sections, implementing the popup with SSE for live activity and polling for status updates as specified in the user's instructions.
</current_work>

<optional_next_step>
Mount the  by adding its routes to the main .
</optional_next_step>
